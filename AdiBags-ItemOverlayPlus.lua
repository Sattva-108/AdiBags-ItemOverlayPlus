local _, ns = ...

local addon = LibStub('AceAddon-3.0'):GetAddon('AdiBags')
local L = addon.L

LibCompat = LibStub:GetLibrary("LibCompat-1.0")

local mod = addon:NewModule("ItemOverlayPlus", 'AceEvent-3.0')
mod.uiName = L['Item Overlay Plus']
mod.uiDesc = L["Adds a red overlay to items that are unusable for you."]

local tooltipName = "AdibagsItemOverlayPlusScanningTooltip"
local tooltipFrame = _G[tooltipName] or CreateFrame("GameTooltip", tooltipName, nil, "GameTooltipTemplate")

local unusableItemsCache = {} -- Cache for scanned items
-- place with other locals
local itemUsableCache  = {}                 -- [itemID] = true | false

-- –í–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
local openBagCount = 0   -- —Å–∫–æ–ª—å–∫–æ —Å—É–º–æ–∫ AdiBags —Å–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è?
-- put with other locals
local lastBagUpdate = 0          -- throttle timestamp (sec)

local function ResetUsableCache()
    wipe(itemUsableCache)
    wipe(unusableItemsCache)                -- keep slot-cache in sync
end

function mod:OnInitialize()
    self.db = addon.db:RegisterNamespace(self.moduleName, {
        profile = {
            EnableOverlay = true,
        },
    })

    -- Register the ITEM_UNLOCKED and MERCHANT_UPDATE event handlers
    local frame = CreateFrame("Frame")
    frame:RegisterEvent("ITEM_LOCK_UPDATE")
    frame:RegisterEvent("BAG_UPDATE")
    frame:RegisterEvent("CURRENT_SPELL_CAST_CHANGED")
    frame:SetScript("OnEvent", function(_, event, bag, slot)
        if openBagCount == 0 then return end          -- —Å—É–º–∫–∏ —Å–∫—Ä—ã—Ç—ã ‚Üí –∏–≥–Ω–æ—Ä

        if event == "BAG_UPDATE" then                -- —Ç—Ä–æ—Ç—Ç–ª–∏–º –¥–æ 10 –∫–∞–¥—Ä–æ–≤
            if GetTime() - lastBagUpdate < 0.10 then return end
            lastBagUpdate = GetTime()
            self:SendMessage('AdiBags_UpdateAllButtons')

        elseif event == "ITEM_LOCK_UPDATE" then      -- –ø—Ä–µ–¥–º–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è
            if bag and slot then                     -- —á–∏—Å—Ç–∏–º –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç —Å–ª–æ—Ç
                unusableItemsCache[bag..","..slot] = nil
            end
            self:SendMessage('AdiBags_UpdateAllButtons')

        elseif event == "CURRENT_SPELL_CAST_CHANGED" then
            -- –ú–µ–Ω—è–µ–º—Å—è —Å–∫–∞—Å—Ç–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º,
            --  –Ω–æ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º itemUsableCache (–∏–Ω–∞—á–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ª–∞–≤–∏–Ω—ã —Ç–∞–π–º–µ—Ä–æ–≤)
            self:SendMessage('AdiBags_UpdateAllButtons')
        end
    end)

    local frame2 = CreateFrame("Frame")
    frame2:RegisterEvent("ITEM_UNLOCKED")
    frame2:RegisterEvent("ITEM_LOCKED")
    frame2:SetScript("OnEvent", function(_, event, bag, slot)
        if event == "ITEM_UNLOCKED" or event == "ITEM_LOCKED" then
            if openBagCount > 0 and bag~=nil and slot~=nil then
                --print(bag, slot)
                unusableItemsCache[bag .. "," .. slot] = nil
                self:SendMessage('AdiBags_UpdateAllButtons')
            end
        end
    end)

    ------------------------------------------------------------------------
    --  —Å–±—Ä–æ—Å –∫—ç—à–∞ –ø—Ä–∏ –∞–ø–µ —É—Ä–æ–≤–Ω—è
    ------------------------------------------------------------------------
    local levelFrame = CreateFrame("Frame")
    levelFrame:RegisterEvent("PLAYER_LEVEL_UP")
    levelFrame:SetScript("OnEvent", function()
        wipe(itemUsableCache)
        if openBagCount > 0 then
            mod:SendMessage('AdiBags_UpdateAllButtons')
        end
    end)

end




function mod:GetOptions()
    EnableOverlay = self.db.profile.EnableOverlay
    return {
        EnableOverlay = {
            name = L["Enable Overlay"],
            desc = L["Check this if you want overlay shown"],
            type = "toggle",
            width = "double",
            order = 10,
            get = function() return EnableOverlay end,
            set = function(_, value)
                EnableOverlay = value
                self.db.profile.EnableOverlay = value
                self:SendMessage('AdiBags_UpdateAllButtons')
            end,
        },
    }, addon:GetOptionHandler(self)
end





-- -- Register a message to check if the bag is open whenever the AdiBags_BagOpened or AdiBags_BagClosed messages are received
-- mod:RegisterMessage('AdiBags_BagOpened', emptyfornow)



function mod:OnEnable()

    EnableOverlay = true
    --self:RegisterMessage('AdiBags_UpdateButton', 'UpdateButton')

    self:RegisterMessage('AdiBags_BagSwapPanelClosed', 'ItemPositionChanged')
    self:RegisterMessage('AdiBags_NewItemReset', 'ItemPositionChanged')
    -- self:RegisterMessage('AdiBags_TidyBagsButtonClick', 'ItemPositionChanged')

    self:RegisterMessage('AdiBags_TidyBags', 'TidyBagsUpdateRed')

    -- –í OnEnable (–∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ)
    self:RegisterMessage('AdiBags_BagOpened',  'OnBagOpened')
    self:RegisterMessage('AdiBags_BagClosed', 'OnBagClosed')

end

function mod:OnBagOpened()
    openBagCount = openBagCount + 1
    if openBagCount == 1 then
        self:RegisterMessage('AdiBags_UpdateButton', 'UpdateButton')
    end

    -- ‚ö° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫—Ä–∞—Å–∫—É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    LibCompat.After(0, function()
        self:SendMessage('AdiBags_UpdateAllButtons')
    end)
end


function mod:OnBagClosed()
    if openBagCount > 0 then
        openBagCount = openBagCount - 1
        if openBagCount == 0 then          -- –≤—Å–µ —Å—É–º–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã
            self:UnregisterMessage('AdiBags_UpdateButton')
            -- –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–æ—Å–∏–º —Ç–∞–π–º–µ—Ä—ã/–∫—ç—à
            wipe(unusableItemsCache)
        end
    end
end


function mod:TidyBagsUpdateRed()
    wipe(unusableItemsCache)
    self:SendMessage('AdiBags_UpdateAllButtons')
    -- print('Tidy Bags: Redoing button scanning due to filters changed')
end


function mod:ItemPositionChanged()
    wipe(unusableItemsCache)
    self:SendMessage('AdiBags_UpdateAllButtons')
    -- print('Button Position: Redoing button scanning due to filters changed')
end



function mod:OnDisable()
    EnableOverlay = false
end

------------------------------------------------------------------------
-- üÜï  Step 4 ‚Äî –∫—Ä–∞—Å–∏–º –∫–Ω–æ–ø–∫—É –¢–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–≤–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è
------------------------------------------------------------------------

-- helper —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
local function ApplyOverlay(button, unusable)
    -- 0 = –±–µ–ª—ã–π, 1 = –∫—Ä–∞—Å–Ω—ã–π  (—Ö—Ä–∞–Ω–∏–º –¥–ª—è –ª–æ–≥–∏–∫–∏, –Ω–æ –Ω–µ –¥–æ–≤–µ—Ä—è–µ–º UI)
    button.__overlayState = unusable and 1 or 0

    if unusable then
        button.IconTexture:SetVertexColor(1, 0.1, 0.1)
    else
        button.IconTexture:SetVertexColor(1, 1,   1)
    end
end


------------------------------------------------------------------------
-- üÜï  Step 2 ‚Äî –µ–¥–∏–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Ç–∞–π–º–µ—Ä–æ–≤
------------------------------------------------------------------------

-- locals (—Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å—á—ë—Ç—á–∏–∫–∞–º–∏)
local pendingButtons, processingQueue = {}, false
local pendingItem = {}   -- pendingItem[id] = true
local BATCH_SIZE = 12          -- –∫–Ω–æ–ø–æ–∫ –∑–∞ –∫–∞–¥—Ä; –ø–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ –≤–∫—É—Å—É

-- === –æ—á–µ—Ä–µ–¥—å —Å head / tail ===========================================
local queue   = {}        -- –∫–æ–ª—å—Ü–µ–≤–∞—è, key = tail –∏–Ω–¥–µ–∫—Å
local qHead   = 1         -- –ø–æ–∑–∏—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
local qTail   = 0         -- –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ

local function QueueIsEmpty() return qTail < qHead end

local function QueuePush(entry)
    qTail = qTail + 1
    queue[qTail] = entry
end

local function QueuePop()
    local entry = queue[qHead]
    queue[qHead] = nil     -- —Å–Ω–∏–º–∞–µ–º —Å—Å—ã–ª–∫—É
    qHead = qHead + 1
    return entry
end


-- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
local function ProcessQueue()
    local processed = 0
    while processed < BATCH_SIZE and not QueueIsEmpty() do
        local e = QueuePop()

        local unusable = mod:ScanTooltipOfBagItemForRedText(e.bag, e.slot)
        itemUsableCache[e.id] = unusable
        pendingItem[e.id]     = nil        -- —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫

        if e.btn and e.btn.IconTexture then
            ApplyOverlay(e.btn, unusable)
        end
        processed = processed + 1
    end

    if not QueueIsEmpty() then
        LibCompat.After(0, ProcessQueue)
    else
        -- —Å–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è GC-–¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
        queue, qHead, qTail = {}, 1, 0
        processingQueue = false
    end
end


-- helper: –∫–ª–∞–¥—ë–º –∫–Ω–æ–ø–∫—É –≤ –æ—á–µ—Ä–µ–¥—å

-- EnqueueButton
-- helper: –∫–ª–∞–¥—ë–º –∫–Ω–æ–ø–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
local function EnqueueButton(bag, slot, itemID, button)
    if pendingItem[itemID] then return end
    pendingItem[itemID] = true

    QueuePush({ bag=bag, slot=slot, id=itemID, btn=button })

    if not processingQueue then
        processingQueue = true
        LibCompat.After(0, ProcessQueue)
    end
end


------------------------------------------------------------------------
--  –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–õ–¨–ö–û –ü–û –£–†–û–í–ù–Æ  (heuristic v2)
--  ‚Ä¢ –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ ‚Äì —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω—ã–π
--  ‚Ä¢ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π tooltip-—Å–∫–∞–Ω
------------------------------------------------------------------------
local function QuickPreCheck(itemID)
    local _, _, _, _, minLevel = GetItemInfo(itemID)
    if not minLevel then return nil end          -- info –µ—â—ë –Ω–µ –≤ –∫—ç—à–µ

    local playerLevel = UnitLevel("player")
    if minLevel > playerLevel then
        return false                             -- —Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∏–≥–æ–¥–µ–Ω
    end
    return nil                                   -- –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
end



-- replace the body of UpdateButton
------------------------------------------------------------------------
--  FULL UpdateButton with debug
------------------------------------------------------------------------
function mod:UpdateButton(_, button)
    if not EnableOverlay then return end

    local itemID = GetContainerItemID(button.bag, button.slot)


    -- ‚ñ∫ —Å–ª–æ—Ç –æ–ø—É—Å—Ç–µ–ª ‚Äî –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π
    if not itemID then
        ApplyOverlay(button, false)
        --print("[IOP] empty", button.bag, button.slot)
        return
    end

    -- –í—Å—Ç–∞–≤—å –≤ UpdateButton –ø–µ—Ä–µ–¥ EnqueueButton
    local pre = QuickPreCheck(itemID)
    if pre ~= nil then               -- —Ä–µ—à–∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ —É—Ä–æ–≤–Ω—é
        itemUsableCache[itemID] = pre
        ApplyOverlay(button, pre)
        return
    end

    -- ‚ñ∫ –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å: —É–∂–µ –∑–Ω–∞–µ–º –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ itemID
    local cached = itemUsableCache[itemID]
    if cached ~= nil then
        ApplyOverlay(button, cached)                   -- ‚Üê —Å—Ç–∞–≤–∏–º —Ü–≤–µ—Ç!
--        print("[IOP] fast", itemID, cached and "red" or "white")
        return
    end

    -- ‚ñ∫ –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: –∫–ª–∞–¥—ë–º –∫–Ω–æ–ø–∫—É –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å
    EnqueueButton(button.bag, button.slot, itemID, button)
--    print("[IOP] queued", itemID, "slot", button.slot)
end




local function roundRGB(r, g, b)
    return floor(r * 100 + 0.5) / 100, floor(g * 100 + 0.5) / 100, floor(b * 100 + 0.5) / 100
end

local function isTextColorRed(textTable)
    if not textTable then
        return false
    end

    local text = textTable:GetText()
    if not text or text == "" or string.find(text, "0 / %d+") then
        return false
    end

    -- local r, g, b = roundRGB(textTable:GetTextColor())
    local r, g, b = textTable:GetTextColor()
    -- return r > 1 and g == 0.13 and b == 0.13
    return r > 0.98 and g < 0.15 and b < 0.15
end

function mod:ScanTooltipOfBagItemForRedText(bag, slot)
    --local tooltip = _G[tooltipName]
    tooltipFrame:ClearLines()
    tooltipFrame:SetBagItem(bag, slot)
    if bag < 0 then
        tooltipFrame:SetInventoryItem('player', slot+39)
    end
    for i=1, tooltipFrame:NumLines() do
        if isTextColorRed(_G[tooltipName .. "TextLeft" .. i]) or isTextColorRed(_G[tooltipName .. "TextRight" .. i]) then
            -- print("Red text found on line:", i, "in bag:", bag, "slot:", slot)
            return true
        end
    end

    return false
end
